<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React - React.Fragment 详解</title>
      <link href="/posts/fbcf08ea/"/>
      <url>/posts/fbcf08ea/</url>
      
        <content type="html"><![CDATA[<h2 id="lt-gt-lt-gt-和-React-Fragment"><a href="#lt-gt-lt-gt-和-React-Fragment" class="headerlink" title="&lt;&gt;&lt; /&gt; 和 React.Fragment"></a>&lt;&gt;&lt; /&gt; 和 React.Fragment</h2><ul><li>&lt;&gt;&lt; /&gt; 是 React.Fragment 的语法糖，也就是说 &lt;&gt;&lt; /&gt; 基本可以当做 React.Fragment 来使用。</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>&lt;React.Fragment&gt; 目前只支持传入 key 属性，未来还会增加其他属性或事件，&lt;&gt;&lt; /&gt; 则不能附带任何属性。</li><li>使用场景：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;props.items.map(item =&gt; (</span></span><br><span class="line"><span class="xml">      // 没有`key`，将会触发一个key警告</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">React.Fragment</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;item.term&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;item.description&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ))&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS - ES6中 import、export 你不知道地方</title>
      <link href="/posts/e84d0a11/"/>
      <url>/posts/e84d0a11/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里只提出一些不常用的小揪揪，module的基本语法不做介绍。感兴趣可以看看阮大神的 <a href="https://es6.ruanyifeng.com/#docs/module">ECMAScript 6 入门</a></p></blockquote><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><ul><li>批量导出<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以用 </span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  API1,</span><br><span class="line">  API2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 替代</span></span><br><span class="line"><span class="keyword">export</span> API1</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> API2</span><br></pre></td></tr></table></figure><span id="more"></span></li><li>设置别名<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其他模块导入的时候只能使用 _API1，若也将 API1 导入，值为 undefined</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  API1 <span class="keyword">as</span> _API1,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><ul><li>import 语句会<mark class="hl-label pink">执行</mark> 所加载的模块，多次重复执行同一句import语句，只会执行一次！</li><li>模块的整体加载：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api.js</span></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> API <span class="keyword">from</span> <span class="string">&#x27;modules&#x27;</span></span><br><span class="line">API.a</span><br><span class="line">API.b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替代以下方式的导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; a, b, c, d, e &#125; <span class="keyword">from</span> <span class="string">&#x27;modules&#x27;</span></span><br></pre></td></tr></table></figure></li><li><mark class="hl-label pink">不允许</mark> 对导入的整体模块进行对象操作： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API.a = &#123;&#125;  API.b = <span class="string">&#x27;hhh&#x27;</span> <span class="comment">// 错误的</span></span><br></pre></td></tr></table></figure></li><li>整体加载也同时会导入模块的默认导出，即 API 的 default 属性为 api.js 中的 export default 值</li><li>若要同时导入模块中的默认导出以及其他接口可以这样：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _, &#123; API1, API2 &#125; <span class="keyword">from</span> <span class="string">&#x27;modules&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="export与import复合使用"><a href="#export与import复合使用" class="headerlink" title="export与import复合使用"></a>export与import复合使用</h2><ul><li>使用场景: 某个<mark class="hl-label pink">功能块</mark> 文件夹下的 index.js 需要<mark class="hl-label pink">向外转发</mark> 其文件夹下某些模块的接口时！</li><li>注意：API1 和 API2 实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，所以当前模块不能直接使用 API1 和 API2<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; API1, API2 &#125; <span class="keyword">from</span> <span class="string">&#x27;modules&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以理解为</span></span><br><span class="line"><span class="keyword">import</span> &#123; API1, API2 &#125; <span class="keyword">from</span> <span class="string">&#x27;modules&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; API1, API2 &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es6 </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman - 进阶使用</title>
      <link href="/posts/7e4e1f4a/"/>
      <url>/posts/7e4e1f4a/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意： 以下所有带【】 的关键词都是为了更方便的在 Postman 中找到对应的操作！</p></blockquote><h3 id="工作环境搭建"><a href="#工作环境搭建" class="headerlink" title="工作环境搭建"></a>工作环境搭建</h3><ul><li><p>创建个人工作空间【Workspace】，习惯格式： ‘项目名称’，(如 ‘非遗CMS’）;</p></li><li><p>在【Workspace】下新建 请求收藏夹【Collections】，如创建【user】收藏夹，该目录下可能有的请求项如：【用户登录】、【用户登出】【刷新token】;</p></li></ul>  <span id="more"></span><h3 id="关于Collections"><a href="#关于Collections" class="headerlink" title="关于Collections"></a>关于Collections</h3><ul><li><p>收藏夹可以【Share】到其他工作空间【Workspace】或团队【Team】中。</p></li><li><p>创建新的请求项【Request】记得要保存在请求收藏夹中【Collections】中，方便再次调用，不重要的请求不要保留，保证收藏夹的所有请求项的唯一性！</p></li><li><p>删除工作空间或团队下的 Collections（请求目录）千万不要【右击 -&gt; Delete】或者 打开目录小面板下的【Delete】进行删除。删除也会连同其他使用到该目录的工作空间下的该目录。应该选择小面板中的 【Remove from workspace】来进行删除只针对当前工作目录的目录。</p></li></ul><h3 id="关于Request"><a href="#关于Request" class="headerlink" title="关于Request"></a>关于Request</h3><ul><li><p>可以为请求项新增某些预设的 Headers （如某些接口必须带上 token ，就可以为其单独添加一个预设值，方便其他请求项使用）</p></li><li><p>请求项中的 Body 栏的属性以及属性值的填写可以直接使用 【Bulk Edit】的命令进行批量编辑，支持复制粘贴！！！</p></li></ul><h3 id="切换环境-amp-变量"><a href="#切换环境-amp-变量" class="headerlink" title="切换环境&amp;变量"></a>切换环境&amp;变量</h3><blockquote><p>一般真实项目中不同的环境使用的接口也是有细微的区别的，主要体现在接口请求跟地址上。</p></blockquote><ol><li>postman 提供了一种 【Environment】的功能，我们可以在【Workspace】下新增不同的环境（如dev、pro等），<br>再在不同的环境中新增不同的【VARIABLE（变量）】，该变量可以设置【INITIAL VALUE】和【CURRENT VALUE】。    - 变量可以在任何【Request】的任何位置上使用，比如 请求地址中、Params中、Headers中、Body中…，    - 使用方法： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;变量名&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如</span></span><br><span class="line">&#123;&#123;base_url&#125;&#125;/<span class="built_in">stat</span>/total</span><br><span class="line"></span><br></pre></td></tr></table></figure>    - 这样就可以实现针对不同环境来请求不用的服务器</li><li>postman 还提供另外一种【Globals】功能，用来添加一些全局变量。当然，全局变量意味着切换到任何环境都可以继续使用。</li></ol><h3 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h3><ul><li><p>创建 Team 邀请其他成员加入进行协作；</p></li><li><p>邀请对象为用户创建 postman 的邮箱，邀请之后可以为该用户设置项目权限等。</p></li></ul><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p>  <img src="https://user-images.githubusercontent.com/44257305/96851178-5344eb00-148a-11eb-83bc-ec0545b13aae.png" alt="xiaoguo"></p>]]></content>
      
      
      <categories>
          
          <category> 神器安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PS - 图片的简单裁切</title>
      <link href="/posts/864d762b/"/>
      <url>/posts/864d762b/</url>
      
        <content type="html"><![CDATA[<blockquote><p>经常会遇到这样一个需求：给你一张 <mark class="hl-label orange">500*357</mark> 的小新全家福，要求等比例缩小一下该图片的像素值，这里就取宽高的一半。</p></blockquote><h2 id="原图"><a href="#原图" class="headerlink" title="原图"></a>原图</h2><p><img src="https://user-images.githubusercontent.com/44257305/89186167-00b40b00-d5ce-11ea-9757-6eb3e288a5b4.jpg" alt="quanjiafu1"></p><span id="more"></span><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><blockquote><p>现在需要通过PS裁切弄出下面的图片该怎么办:</p></blockquote><p><img src="https://user-images.githubusercontent.com/44257305/89187359-c2b7e680-d5cf-11ea-9bcb-12b8cfb25c88.png" alt="quanjiafu2"></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>在 PS 中打开大分辨率图片，然后取消对图层的锁定状态<br>   <img src="https://user-images.githubusercontent.com/44257305/89187839-61444780-d5d0-11ea-9742-d8996bf4501b.gif" alt="1"></p></li><li><p>点击菜单栏的图像-画布大小，设置画布大小为 <mark class="hl-label orange">250*175</mark> ，注意单位是像素以及勾选掉<mark class="hl-label orange">相对</mark> 这个选项<br><img src="https://user-images.githubusercontent.com/44257305/89188472-49b98e80-d5d1-11ea-8531-423810b5199d.gif" alt="2"></p></li><li><p>按下快捷键，<mark class="hl-label orange">ctrl+t</mark> ,进入自由变换工具，然后按住周围任意触点进行轻微拖动，然后在上面选项栏直接输入 <strong>w:250 h:175</strong> 以最快的方式缩小至画布边缘，再 <strong>enter</strong> 或 <strong>双击</strong> 即可保存这次更改，最后快速导出 <strong>.png</strong> 文件也就完成了<br><img src="https://user-images.githubusercontent.com/44257305/89189645-dfa1e900-d5d2-11ea-8574-7d5e2566092b.gif" alt="3"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Adobe系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css - 利用伪元素的 content 属性实现 tooltip 插件的功能</title>
      <link href="/posts/4b9f678b/"/>
      <url>/posts/4b9f678b/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当要实现元素 hover 的时候显示提示信息，如果用 title 属性觉得效果太弱，但是又不想用JS写，更不想引入一个 tooltip 第三方库，这个时候可以用CSS3的attr 属性实现，将想要展示的提示内容放到一个属性里面，而且样式可以由自己设计！</p></blockquote><div class="note primary flat"><p>核心代码 <code>content: attr(data-title);</code></p></div><span id="more"></span><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>其实, <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-title</span>=<span class="string">&#x27;Are you sure?&#x27;</span>&gt;</span>我一直在努力！<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-tag">span</span><span class="selector-attr">[data-title]</span>&#123;</span></span><br><span class="line"><span class="css">     <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     </span></span><br><span class="line"><span class="css">     <span class="selector-tag">span</span><span class="selector-attr">[data-title]</span><span class="selector-pseudo">:hover</span>:before&#123;</span></span><br><span class="line"><span class="css">       content: <span class="built_in">attr</span>(data-title);</span></span><br><span class="line"><span class="css">       <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">       <span class="attribute">top</span>: -<span class="number">160%</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">background-color</span>: <span class="number">#FF9800</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">       <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="css">       <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">     <span class="comment">/* 小三角形 */</span></span></span><br><span class="line"><span class="css">     <span class="selector-tag">span</span><span class="selector-attr">[data-title]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">       <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">       <span class="attribute">top</span>: -<span class="number">35%</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">border-left</span>: <span class="number">10px</span> solid transparent;</span></span><br><span class="line"><span class="css">       <span class="attribute">border-right</span>: <span class="number">10px</span> solid transparent;</span></span><br><span class="line"><span class="css">       <span class="attribute">border-top</span>: <span class="number">10px</span> solid <span class="number">#FF9800</span>;</span></span><br><span class="line"><span class="css">       <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="content-属性可设置的其他值"><a href="#content-属性可设置的其他值" class="headerlink" title="content 属性可设置的其他值"></a>content 属性可设置的其他值</h3><ul><li><code>String</code> 使用 ‘’ 包括一段字符串将作为该伪元素显示的内容</li><li><code>attr()</code> 将用当前伪元素父元素的某个属性值作为该伪元素显示的内容(如图片的 alt 属性或 a链接的 href 属性等)</li><li><code>url()</code> 引用媒体文件作为该伪元素显示的内容（如 <code>url(&#39;./public/images/avatar.png&#39;)</code>）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css小技巧 </tag>
            
            <tag> css伪元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js - 数组常用方法详解</title>
      <link href="/posts/5702dcb1/"/>
      <url>/posts/5702dcb1/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="push-…arg"><a href="#push-…arg" class="headerlink" title="push(…arg)"></a>push(…arg)</h3><p><code>更改原数组</code>: 会<br><code>作用</code>  接收任意数量的参数，将它们逐个添加到数组的末尾处<br><code>返回值</code> 返回更改后数组的 length 值</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newLength = arr.push(<span class="literal">true</span>, [<span class="number">5</span>,<span class="number">6</span>], &#123;<span class="attr">methodName</span>: <span class="string">&#x27;push&#x27;</span>, <span class="attr">changeSourceArr</span>: <span class="literal">true</span>  &#125;, <span class="string">&#x27;PUSH&#x27;</span>, <span class="built_in">Symbol</span>(<span class="string">&#x27;push&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newLength:&#x27;</span>, newLength) <span class="comment">// 7 (type: &#x27;number&#x27;)  </span></span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p><code>更改原数组</code>: 会<br><code>作用</code>  移除数组末尾最后一项，减少数组的 length 值<br>    <code>返回值</code> 返回被移除的项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;item1&#x27;</span>, <span class="literal">true</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;glk&#x27;</span>&#125;]  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">let</span> deleItem = arr.pop()</span><br><span class="line">   </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr:&#x27;</span>, arr) <span class="comment">// [&#x27;item1&#x27;, true] (type: &#x27;array&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;deleItem&#x27;</span>, deleItem) <span class="comment">// &#123;name: &quot;glk&quot;&#125; (type: &#x27;object&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p><code>更改原数组</code>: 会<br><code>作用</code>  移除数组第一项，减少数组的 length 值<br><code>返回值</code> 返回被移除的项，数组为空则返回 undefined </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;item1&#x27;</span>, <span class="literal">true</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;glk&#x27;</span>&#125;]  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">let</span> deleItem = arr.shift()</span><br><span class="line">   </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr:&#x27;</span>, arr) <span class="comment">// [true, &#123;&#x27;name&#x27;: &#x27;glk&#x27;&#125;] (type: &#x27;array&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;deleItem&#x27;</span>, deleItem) <span class="comment">// &#x27;item1&#x27; (type: &#x27;object&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="unshift-…arg"><a href="#unshift-…arg" class="headerlink" title="unshift(…arg)"></a>unshift(…arg)</h3><p><code>更改原数组</code>: 会<br><code>作用</code>  接受任意数量的参数，将参数逐个添加到原数组开头处，并<br><code>返回值</code> 返回更改后数组的 length 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;item1&#x27;</span>, <span class="literal">true</span>]  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">let</span> newLength = arr.unshift(<span class="string">&#x27;newItem&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">   </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr:&#x27;</span>, arr) <span class="comment">// [&#x27;newItem&#x27;, false, &#x27;item1&#x27;, true](type: &#x27;array&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newLength&#x27;</span>, deleItem) <span class="comment">// 4 (type: &#x27;number&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="slice-start-end"><a href="#slice-start-end" class="headerlink" title="slice(start[, end])"></a>slice(start[, end])</h3><p><code>更改原数组</code>: 不会<br><code>作用</code>  接受两个参数，根据这两个参数从原数组中截取选定的元素<br><code>返回值</code> 返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。<br><code>参数</code> </p><blockquote><p>   start: <em>可选。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</em><br>end: <em>可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</em><br>    <br><strong>以上参数解释是官方，可能在用负数的时候有点乱，这里只要记住一句话：</strong>这个方法是截取数组的，截取的的方向一直都是【从左到右】，正负值只是决定了在 start 或 end 在对应值的时候是从左边还是右边开始算</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;item1&#x27;</span>, <span class="string">&#x27;item2&#x27;</span>, <span class="string">&#x27;item3&#x27;</span>, <span class="string">&#x27;item4&#x27;</span>]</span><br><span class="line">   </span><br><span class="line"><span class="keyword">let</span> newArr1 = arr.slice(<span class="number">1</span>) <span class="comment">// [&#x27;item2&#x27;, &#x27;item3&#x27;, &#x27;item4&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr2 = arr.slice(<span class="number">1</span>, <span class="number">3</span>) <span class="comment">// [&#x27;item2&#x27;, &#x27;item3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr3 = arr.slice(-<span class="number">2</span>) <span class="comment">// [&#x27;item3&#x27;, &#x27;item4&#x27;] </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr4 = arr.slice(-<span class="number">2</span>, -<span class="number">1</span>) <span class="comment">// [&#x27;item3&#x27;] </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="splice-start-end"><a href="#splice-start-end" class="headerlink" title="splice(start[, end])"></a>splice(start[, end])</h3><p><code>更改原数组</code>: 会<br><code>作用</code>  向数组中添加，或从数组删除，或替换数组中的元素，然后<br><code>返回值</code> 返回被删除/替换的元素<br><code>参数</code> </p><blockquote><p>start: <em>可选。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</em><br>end: <em>可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</em>    </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1) 增加数组项</span></span><br><span class="line">   <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> retVal = arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;加入1&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;arr:&#x27;</span>, arr) <span class="comment">// [1, &#x27;加入1&#x27;, 2, 3, 4]</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;retVal:&#x27;</span>, retVal) <span class="comment">// 删除数目为 0，所以返回 []</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">// 2) 只删除数组项</span></span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> retVal = arr.splice(<span class="number">0</span>, <span class="number">2</span>) </span><br><span class="line">   </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;arr:&#x27;</span>, arr) <span class="comment">// [3, 4]</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;retVal:&#x27;</span>, retVal) <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3) 删除数组项并整体替换</span></span><br><span class="line">   <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> retVal = arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;replace&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;arr:&#x27;</span>, arr) <span class="comment">// [1,&#x27;replace&#x27;, 4]</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;retVal:&#x27;</span>, retVal) <span class="comment">// [2, 3]</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 4) 删除数组项并对应替换</span></span><br><span class="line">   <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> retVal = arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;replace2&#x27;</span>, <span class="string">&#x27;replace3&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;arr:&#x27;</span>, arr) <span class="comment">// [1,&#x27;replace2&#x27;, &#x27;replace3&#x27;, 4]</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;retVal:&#x27;</span>, retVal) <span class="comment">// [2, 3]</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><h3 id="indexOf-item-start"><a href="#indexOf-item-start" class="headerlink" title="indexOf(item[, start])"></a>indexOf(item[, start])</h3><p><code>更改原数组</code>: 不会<br><code>作用</code>  该方法将从头到尾地检索数组。看它是否含有对应的 item 。开始检索的位置在数组 start 处或数组的开头（没有指定 start 参数时，默认检索索引为0）。如果找到一个 item，则返回 item 的<strong>第一次</strong>出现的位置。<br><code>返回值</code> 返回数组中 item 元素【从左往右第一次出现的位置】。没有返回 -1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;鸡&#x27;</span>, <span class="string">&#x27;翅&#x27;</span>, <span class="string">&#x27;包&#x27;</span>, <span class="string">&#x27;饭&#x27;</span>, <span class="string">&#x27;只&#x27;</span>, <span class="string">&#x27;吃&#x27;</span>, <span class="string">&#x27;到&#x27;</span>, <span class="string">&#x27;了&#x27;</span>, <span class="string">&#x27;饭&#x27;</span>]  </span><br><span class="line">   </span><br><span class="line">arr.indexOf(<span class="string">&#x27;饭&#x27;</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">arr.indexOf(<span class="string">&#x27;饭&#x27;</span>, <span class="number">3</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">arr.indexOf(<span class="string">&#x27;饭&#x27;</span>, <span class="number">4</span>) <span class="comment">// 8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="lastIndexOf-item-start"><a href="#lastIndexOf-item-start" class="headerlink" title="lastIndexOf(item[, start])"></a>lastIndexOf(item[, start])</h3><p><code>更改原数组</code>: 不会<br><code>作用</code>  该方法将从尾到头地检索数组中指定元素 item。开始检索的位置在数组的 start 处或数组的结尾（没有指定 start 参数时，默认索引为 arr.length - 1）。如果找到一个 item，则返回 item 从尾向前检索第一个次出现的项在数组中的索引。<br><code>返回值</code> 返回数组中 item 元素【从右往左检索第一次出现的位置】。没有返回 -1<br><code>注意</code> 这里最后返回的索引值还是该项在数组中从左往右的索引值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;鸡&#x27;</span>, <span class="string">&#x27;翅&#x27;</span>, <span class="string">&#x27;包&#x27;</span>, <span class="string">&#x27;饭&#x27;</span>, <span class="string">&#x27;只&#x27;</span>, <span class="string">&#x27;吃&#x27;</span>, <span class="string">&#x27;到&#x27;</span>, <span class="string">&#x27;了&#x27;</span>, <span class="string">&#x27;饭&#x27;</span>]  </span><br><span class="line">   </span><br><span class="line">arr.lastIndexOf(<span class="string">&#x27;饭&#x27;</span>) <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">arr.lastIndexOf(<span class="string">&#x27;饭&#x27;</span>, <span class="number">3</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">arr.lastIndexOf(<span class="string">&#x27;饭&#x27;</span>, <span class="number">4</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">arr.lastIndexOf(<span class="string">&#x27;饭&#x27;</span>, <span class="number">2</span>) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h3 id="forEach-callback"><a href="#forEach-callback" class="headerlink" title="forEach(callback)"></a>forEach(callback)</h3><p><code>更改原数组</code>: 不会<br><code>作用</code>  ES5新增的方法，用来遍历数组。<br><code>返回值</code> 没有返回值！<br><code>回调参数</code> 默认有三个参数，分别为value(遍历到的数组的数据)，index(对应的索引)，self(数组自身)。</p><blockquote><p><strong><em>对于该方法到底能不能改变原数组(或改变原数组中某项的值)，有以下建议:</em></strong><br>1）操作的项是引用类型可以直接去重新赋值去改变原数组（需慎重）；<br>2）操作的项是基本类型需要找到这项值来的根源去赋值，比如在 forEach 回调中可以通过 self[index] = newVal, 不可以直接 item = newVal 去直接重新赋值，下面有示例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1) 基本的遍历</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;鸡&#x27;</span>, <span class="string">&#x27;翅&#x27;</span>, <span class="string">&#x27;包&#x27;</span>, <span class="string">&#x27;饭&#x27;</span>, <span class="string">&#x27;只&#x27;</span>, <span class="string">&#x27;吃&#x27;</span>, <span class="string">&#x27;到&#x27;</span>, <span class="string">&#x27;了&#x27;</span>, <span class="string">&#x27;饭&#x27;</span>]  </span><br><span class="line">    </span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, index, self) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 结果如下:</span></span><br><span class="line"><span class="comment">   鸡 0 [&quot;鸡&quot;, &quot;翅&quot;, &quot;包&quot;, &quot;饭&quot;, &quot;只&quot;, &quot;吃&quot;, &quot;到&quot;, &quot;了&quot;, &quot;饭&quot;]</span></span><br><span class="line"><span class="comment">   翅 1 [&quot;鸡&quot;, &quot;翅&quot;, &quot;包&quot;, &quot;饭&quot;, &quot;只&quot;, &quot;吃&quot;, &quot;到&quot;, &quot;了&quot;, &quot;饭&quot;]</span></span><br><span class="line"><span class="comment">   包 2 [&quot;鸡&quot;, &quot;翅&quot;, &quot;包&quot;, &quot;饭&quot;, &quot;只&quot;, &quot;吃&quot;, &quot;到&quot;, &quot;了&quot;, &quot;饭&quot;]</span></span><br><span class="line"><span class="comment">   饭 3 [&quot;鸡&quot;, &quot;翅&quot;, &quot;包&quot;, &quot;饭&quot;, &quot;只&quot;, &quot;吃&quot;, &quot;到&quot;, &quot;了&quot;, &quot;饭&quot;]</span></span><br><span class="line"><span class="comment">   只 4 [&quot;鸡&quot;, &quot;翅&quot;, &quot;包&quot;, &quot;饭&quot;, &quot;只&quot;, &quot;吃&quot;, &quot;到&quot;, &quot;了&quot;, &quot;饭&quot;]</span></span><br><span class="line"><span class="comment">   吃 5 [&quot;鸡&quot;, &quot;翅&quot;, &quot;包&quot;, &quot;饭&quot;, &quot;只&quot;, &quot;吃&quot;, &quot;到&quot;, &quot;了&quot;, &quot;饭&quot;]</span></span><br><span class="line"><span class="comment">   到 6 [&quot;鸡&quot;, &quot;翅&quot;, &quot;包&quot;, &quot;饭&quot;, &quot;只&quot;, &quot;吃&quot;, &quot;到&quot;, &quot;了&quot;, &quot;饭&quot;]</span></span><br><span class="line"><span class="comment">   了 7 [&quot;鸡&quot;, &quot;翅&quot;, &quot;包&quot;, &quot;饭&quot;, &quot;只&quot;, &quot;吃&quot;, &quot;到&quot;, &quot;了&quot;, &quot;饭&quot;]</span></span><br><span class="line"><span class="comment">   饭 8 [&quot;鸡&quot;, &quot;翅&quot;, &quot;包&quot;, &quot;饭&quot;, &quot;只&quot;, &quot;吃&quot;, &quot;到&quot;, &quot;了&quot;, &quot;饭&quot;]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2) 结合参数间接改变数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">i, idx, self</span>) =&gt;</span> &#123;</span><br><span class="line">   self[idx] = i + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr&#x27;</span>, arr) <span class="comment">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="map-callback"><a href="#map-callback" class="headerlink" title="map(callback)"></a>map(callback)</h3><p><code>更改原数组</code>: 不会<br><code>作用</code>  功能同 forEach() ,用来遍历数组。<br><code>返回值</code> map的回调函数会将执行结果返回，最后map将所有回调函数的返回值组成新数组返回。<br><code>回调参数</code> 默认有三个参数，同 forEach 的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求，拿到数组中每一项的 name 值存入新的数组中</span></span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;吕布&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">100</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;貂蝉&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;小乔&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;周瑜&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">102</span></span><br><span class="line">  &#125;</span><br><span class="line">]  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> nameList = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.name</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;nameList:&#x27;</span>, nameList) <span class="comment">// [&#x27;吕布&#x27;, &#x27;貂蝉&#x27;, &#x27;小乔&#x27;, &#x27;周瑜&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr:&#x27;</span>, arr) <span class="comment">// 原数组不变</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS PAI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android - 手机卡？没有存储空间了？试试这个工具！</title>
      <link href="/posts/cf1604fc/"/>
      <url>/posts/cf1604fc/</url>
      
        <content type="html"><![CDATA[<ul><li>正版: <a href="https://pan.baidu.com/s/1pPiV4-wIBDbAtINfsTt7lg">ES File Explorer</a>  (提取码: yyvi)<span id="more"></span><blockquote><p>这款正在用，有几个小问题：【广告多】【扫描慢了一点】【部分功能需要权限或VIP】</p></blockquote>  &gt; 但总的来说还是很不错的。上初中的时候(13-14年吧)用的第一款第三方文件管理器就是它，手机依稀记得是联想的Al8t吧，就是那种充话费送的手机，那时候3G刚出来，什么沃3G、动感地带SIM卡、一个月5M流量多的用不掉、一张身份证随便办几张卡，用欠费随便扔，从不注销的的情况比比皆是，想想是真的爽！ 那个时候这款工具功能就很齐全。不知道为什么后来给忘记了，惭愧，今天补上以表歉意。。。</li></ul><ul><li>破解版: <a href="https://pan.baidu.com/s/126EltLUpTAQjZ3tofTyXCg">ES File Explorer</a> (提取码: 1wo2)<blockquote><p>这个没有试过，应该是挺不错的。去广告解锁高级版 + Google Play 版,具体<br>   更改如下：</p></blockquote><ul><li>优化图形和清理资源，实现快速加载；</li><li>广告已删除；</li><li>赞助商横幅布局已删除；</li><li>飞溅屏幕已删除；</li><li>删除强制自动快捷方式；</li><li>SD卡上没有英国媒体报道文件夹；</li><li>已禁用/已删除不需要的权限+接收方和服务；</li><li>平板电脑模式下的所有广告横幅广告已删；</li><li>删除原生 admob + mopub 广告横幅布局；</li><li>从菜单中删除了 Messagebox + 社交按钮；</li><li>删除退出应用的反馈；</li><li>驱动云工作；</li><li>实时监控解锁；</li><li>主题选择器解锁；</li><li>SMB 2.0 解锁；</li><li>系统隐藏文件解锁；</li><li>礼物图标从 Es Swipe 中删除；<br>   - Google Analytics / Crashlytics 已停用。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app神器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome - 谷歌浏览器超好用的扩展程序</title>
      <link href="/posts/c0e23214/"/>
      <url>/posts/c0e23214/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一款好的浏览器扩展程序有时候会让你？咦…这个….(<del>自己体会吧</del>) 快来围观我推荐的超级神器吧，好用到爆！开局一人一谷歌，装备全靠 <del>抄我的</del>。以下扩展外链需要翻墙。部分可以去<a href="http://chromecj.com/">Chrome插件网</a>或<a href="http://www.cnplugins.com/">插件网</a>者进行离线下载安装。</p></blockquote><h2 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h2><h3 id="Vimium"><a href="#Vimium" class="headerlink" title="Vimium"></a><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=zh-CN">Vimium</a></h3><span id="more"></span><p><img src="https://user-images.githubusercontent.com/44257305/69305127-d992f480-0c5d-11ea-9717-a32e2b7ef941.png" alt="Vimium"></p><blockquote><p>vimium&amp;&amp;chrome浏览器双剑合璧<sup><del>无敌</del></sup>, 可以用键盘代替鼠标的操作, 提高浏览速度和上网体验。以节省因频繁的重复性操作的时间！固然TOP1！</p></blockquote><h3 id="AdBlock"><a href="#AdBlock" class="headerlink" title="AdBlock"></a><a href="https://chrome.google.com/webstore/detail/adblock-%E2%80%94-best-ad-blocker/gighmmpiobklfepjocnamgkkbiglidom">AdBlock</a></h3><p><img src="https://user-images.githubusercontent.com/44257305/69305121-d7c93100-0c5d-11ea-906d-f633c2bbf4ad.png" alt="AdBlock"></p><blockquote><p>一款拦截网页广告的工具(默认使用的时候在所有网站上拦截广告)。比较好用！<br>    - 还可以在特定网页上拦截广告；<br>    - 还可以在特点网站上拦截广告；<br>    - 更可以手动编辑拦截规则             </p></blockquote><h3 id="Google翻译"><a href="#Google翻译" class="headerlink" title="Google翻译"></a><a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb">Google翻译</a></h3><p><img src="https://user-images.githubusercontent.com/44257305/69305119-d7309a80-0c5d-11ea-81db-d67e536b3537.png" alt="Google翻译"></p><blockquote><p>翻译工具，不再细说。能满足正常的翻译功能就好！</p></blockquote><h3 id="网页截图-注释-amp-录屏"><a href="#网页截图-注释-amp-录屏" class="headerlink" title="网页截图:注释&amp;录屏"></a><a href="https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj">网页截图:注释&amp;录屏</a></h3><p><img src="https://user-images.githubusercontent.com/44257305/69305140-dbf54e80-0c5d-11ea-9619-7a249c8031b5.png" alt="网页截图:注释&amp;录屏"></p><blockquote><p>到目前为止用过最好的截图录屏的扩展一体的扩展程序！除了最基本的截图功能外。还有几个特别实用的功能:<br>    * 可以截取整个网页(包括滚动条下的所有地方哦)；<br>    * 可以截取桌面窗口(包括整个屏幕或应用窗口)；<br>    * 可以延时录屏视频(包括整个屏幕或应用窗口)；<br>    * 所有录制或截取的文件都可以上传或下载。<br>    * 录制的视频或图片会自动托管在线上的项目中，方便管理。</p></blockquote><blockquote><p>但是有点客席，管理和共享屏幕截图的项目,免费的服务是这样说的：“每个项目30张图片,每个视频30秒的视频录制…”如果需要录制更长的视频则要用谷歌账号登录它的官网<a href="https://www.awesomescreenshot.com/pricing?from=video">awesomescreenshot</a>，你们听听，这，这，说的是人话吗？购买服务！让我付钱？可能吗？不，绝对不可能@-v-@ 所以，推荐下一个扩展：【ApowerREC - 录屏工具】</p></blockquote><h3 id="ApowerREC-录屏工具"><a href="#ApowerREC-录屏工具" class="headerlink" title="ApowerREC - 录屏工具"></a><a href="https://chrome.google.com/webstore/detail/apowerrec-screen-video-re/plnnpndcgjokianndhalbgnpcbkbehmp">ApowerREC - 录屏工具</a></h3><p><img src="https://user-images.githubusercontent.com/44257305/69305130-da2b8b00-0c5d-11ea-8814-e6c36770c45a.png" alt="ApowerREC - 录屏工具"></p><blockquote><p>这款砖门为录屏而设计的扩展，除了解决Top4录制时间太短的限制之外。它还新增了【摄像头画面】的录制以及在录制过程中可以任意附带使用【麦克风声音和系统声音】。<del>它和 Top4 在一起使用更丝滑哦</del></p></blockquote><h3 id="Infinity-新标签页-Pro"><a href="#Infinity-新标签页-Pro" class="headerlink" title="Infinity 新标签页 (Pro)"></a><a href="https://chrome.google.com/webstore/detail/infinity-new-tab-pro/nnnkddnnlpamobajfibfdgfnbcnkgngh">Infinity 新标签页 (Pro)</a></h3><p><img src="https://user-images.githubusercontent.com/44257305/69305136-db5cb800-0c5d-11ea-9220-cdf968a19f21.png" alt="Infinity 新标签页 (Pro)"></p><blockquote><p>这是一款简洁美观又实用，功能丰富的新标签页插件。下面几个亮点很给力：<br>    * 自由添加网站图标，更换云端高清壁纸<br>    * 多样化的搜索引擎。甚至为它们定制专属Logo。并且支持对搜索框大小、圆角、透明度等进行修改<br>    * Gmail邮件通知。当与Gmail关联账号后，图标上会出现未读邮件数量的角标提示，并伴有声音提醒<br>    * 待办事项。随时记录和查看你要做的事和做过的事，图标上会出现未完成事项数量的角标提示。<br>    * 笔记、书签、历史记录、扩展管理、天气、云备份等等，有时间自己去挖掘一下。</p></blockquote><h3 id="Lastpass"><a href="#Lastpass" class="headerlink" title="Lastpass"></a><a href="https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd">Lastpass</a></h3><p><img src="https://user-images.githubusercontent.com/44257305/69305139-dbf54e80-0c5d-11ea-9391-25faea1f5a83.png" alt="Lastpass"></p><blockquote><p>注册的账号太多容易忘记密码？试试这个插件吧，全球最知名在线密码管理工具之一，只需要记住一个密码，就能够进行一键登录。</p></blockquote><ol><li>下载安装完插件后进行账号注册并登录。</li><li>当插件图标由灰色变为红色时，就代表登录成功，这样以后登录任何网站，它都会帮你填充好用户名和密码。<br><strong>至于密码泄露的问题我也不太清楚，其他地方都说采用军事级加密方式安全有保障。要我说，谁还不是之前就已经在一个小地方记录好了自己的那一大堆密码？而这些密码记录的载体。又是否安全呢？无从知晓~ 所以使用看个人想法吧</strong></li></ol><h3 id="OneTab"><a href="#OneTab" class="headerlink" title="OneTab"></a><a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall">OneTab</a></h3><p><img src="https://user-images.githubusercontent.com/44257305/69305145-dd267b80-0c5d-11ea-84eb-36ba93a88697.png" alt="OneTab"></p><blockquote><p>它可以解决网页上多个标签页来回切换麻烦且可能容易造成电脑卡顿的问题，听说还能节省 95% 的内存，电脑卡顿的可以试试。</p></blockquote><h3 id="Proxy-SwitchyOmega"><a href="#Proxy-SwitchyOmega" class="headerlink" title="Proxy SwitchyOmega"></a><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">Proxy SwitchyOmega</a></h3><p><img src="https://user-images.githubusercontent.com/44257305/83419606-e340b480-a457-11ea-8b45-4e7aab37d652.png" alt="Proxy SwitchyOmega"></p><blockquote><p>可以快速切换或导入其他情景模式的翻墙工具，支持一些个性化设置，自己的用的较多！<br>可以配合<a href="https://monocloud.me/">monocloud</a>的<a href="https://www.monocloud.me/knowledgebase/1">教程</a>使用</p></blockquote><h3 id="Astar-VPN"><a href="#Astar-VPN" class="headerlink" title="Astar VPN"></a><a href="https://chrome.google.com/webstore/detail/astar-vpn-free-and-fast-v/jajilbjjinjmgcibalaakngmkilboobh">Astar VPN</a></h3><p><img src="https://user-images.githubusercontent.com/44257305/83418892-dd969f00-a456-11ea-9698-c4bd0289cc1f.png" alt="AstarVPN"></p><blockquote><p>是一更快捷更方便的翻墙工具，亲测几乎能翻所有的网站。连接速度也很快，操作也方便。可以去试试！</p></blockquote><hr><h2 id="适用于开发者"><a href="#适用于开发者" class="headerlink" title="适用于开发者"></a>适用于开发者</h2><h3 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">Tampermonkey</a></h3><blockquote><p>如果觉得上面的扩展怎么看都感觉少了点啥。直接用这个自己写。想怎么玩就怎么玩~</p></blockquote><p><img src="https://user-images.githubusercontent.com/44257305/69305131-da2b8b00-0c5d-11ea-81cc-69d346b7fa80.png" alt="油猴脚本"></p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>方便的脚本管理、脚本概览、</li><li>设置多样性、脚本自动更新、安全、兼容性</li><li>个性编辑器、JSHint 语法检查、快速开发、引用第三方库或工具等。</li></ul><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><ol><li><strong>自己开发脚本</strong>:<br><img src="https://user-images.githubusercontent.com/44257305/69305118-d7309a80-0c5d-11ea-9bee-36d4bd326d36.png" alt="第一步"><br><img src="https://user-images.githubusercontent.com/44257305/69305135-db5cb800-0c5d-11ea-8080-29a97bc5edd7.png" alt="第二步"><br>写好之后 <code>ctrl+s</code> 保存刷新浏览器即可！<a href="https://www.jianshu.com/p/cf3f8d20bbfc">具体的编写规则及细节</a></li><li><strong>使用他人开发好的脚本</strong>:<blockquote><p>直接去 <a href="https://greasyfork.org/zh-CN">Greasy Fork</a>搜索自己想要的脚本安装就使用就好。我自己也写了一个小脚本: <a href="https://greasyfork.org/zh-CN/scripts/391989-%E7%99%BE%E5%BA%A6%E5%8E%BB%E5%B9%BF%E5%91%8A-%E6%90%9C%E7%B4%A2%E9%A1%B5%E5%8E%BB%E5%8F%B3%E8%BE%B9%E6%A0%8F%E6%8E%A8%E8%8D%90%E5%86%85%E5%AE%B9-%E4%B8%AA%E6%80%A7%E6%8E%92%E7%89%88%E4%B8%BB%E9%A2%98">百度去广告-个性主题</a> 感兴趣的可以下载试试。</p></blockquote></li></ol><p>  下载之后的脚本可通过管理面板进行管理：<br>  <img src="https://user-images.githubusercontent.com/44257305/69305125-d8fa5e00-0c5d-11ea-97e3-85dcf4c532f6.png" alt="管理面板"></p><h3 id="Octotree"><a href="#Octotree" class="headerlink" title="Octotree"></a><a href="https://www.octotree.io/">Octotree</a></h3><blockquote><p>github项目文件目录快速浏览助手<br>它节约了我们在浏览 Github 开源项目中因不了解项目的整体目录而频繁切换文件跳转新链接过程中所浪费的时间</p></blockquote><p><img src="https://user-images.githubusercontent.com/44257305/69305134-dac42180-0c5d-11ea-87de-1d33d9097e95.png" alt="Octotree"></p><div class="note success flat"><p>安装后看项目就是这个样子</p></div><p><img src="https://user-images.githubusercontent.com/44257305/69305113-d5ff6d80-0c5d-11ea-89a9-de5ea49421b9.png" alt="Octotree"></p><h3 id="FeHelper-前端助手"><a href="#FeHelper-前端助手" class="headerlink" title="FeHelper(前端助手)"></a><a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad?hl=zh-CN">FeHelper(前端助手)</a></h3><blockquote><p>这个安装之后添加在右键菜单中的扩展在几乎囊括了前端开发中会用到的大多数小工具。比如：Json工具、代码美化、代码压缩、二维码、Postman、markdown、网页油猴、便签笔记、信息加密与解密、随机密码生成、Crontab等等！</p></blockquote><p><img src="https://user-images.githubusercontent.com/44257305/69305116-d6980400-0c5d-11ea-922f-aaccbf391a80.png" alt="WEB前端助手"></p><p>一张图送给你：<br><img src="https://user-images.githubusercontent.com/44257305/69305123-d861c780-0c5d-11ea-8685-e7850692e1e3.png"></p><h3 id="JSON-Viewer"><a href="#JSON-Viewer" class="headerlink" title="JSON Viewer"></a><a href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=zh-CN">JSON Viewer</a></h3><blockquote><p>JSON数据格式化<br>网页上显示的JSON文件会通过这个工具自动格式化，还可以调格式化后样式。</p></blockquote><p><img src="https://user-images.githubusercontent.com/44257305/69305133-dac42180-0c5d-11ea-9bc0-4e8c7766ca8c.png" alt="JSON Viewer"></p><p>效果图:</p><p><img src="https://user-images.githubusercontent.com/44257305/69305138-dbf54e80-0c5d-11ea-8671-69f63f151e0d.png"></p><h3 id="Postman-Interceptor"><a href="#Postman-Interceptor" class="headerlink" title="Postman Interceptor"></a><a href="https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo">Postman Interceptor</a></h3><blockquote><p>它款功能强大的网页调试与发送网页HTTP请求的Chrome插件，在发送网络HTTP请求方面可以说是Chrome插件类产品中的代表产品之一。</p></blockquote><p><img src="https://user-images.githubusercontent.com/44257305/69305124-d8fa5e00-0c5d-11ea-8b29-79350301884e.png" alt="Postman Interceptor"></p><h3 id="扩展管理器"><a href="#扩展管理器" class="headerlink" title="扩展管理器"></a><a href="https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco">扩展管理器</a></h3><p><img src="https://user-images.githubusercontent.com/44257305/69305142-dc8de500-0c5d-11ea-9e90-06c59d44a8fe.png" alt="扩展管理器"></p><blockquote><p>为什么要以它收尾？有没有发现之前说过好多好多好用的扩展，但是它们不一定会在同一时间段同时使用到。<br>所以按需加载才是正道，这款插件可以完美的实现在它们之间任意的调度使用。界面交互也是很不错的💥</p></blockquote><p>奉上截图💌：</p><p><img src="https://user-images.githubusercontent.com/44257305/69305109-d5ff6d80-0c5d-11ea-852e-17b41c3bb4ab.png" alt="扩展管理器"></p><p>以上所有扩展具体细节还是需要自己去探索一下,<code>如果不好用？不，没有如果！</code></p>]]></content>
      
      
      <categories>
          
          <category> Chrome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> google </tag>
            
            <tag> chrome扩展 </tag>
            
            <tag> 梯子 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
